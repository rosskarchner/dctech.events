<form id="group-form" hx-post="https://api.dctech.events/api/groups" hx-swap="outerHTML">
    <p>Hello {{user_email}}, please provide details about the tech group you'd like to suggest.</p>
    
    <div class="form-group">
        <label for="group-name">Group Name *</label>
        <input type="text" id="group-name" name="name" required>
        <div class="error-message" id="name-error" style="display: none;">Please enter a valid group name</div>
    </div>
    
    <div class="form-group">
        <label for="website-url">Website URL *</label>
        <input type="url" id="website-url" name="website" required placeholder="https://example.com">
        <div class="error-message" id="website-error" style="display: none;">Please enter a valid URL</div>
    </div>
    
    <div class="form-group">
        <label for="ical-url">iCal URL *</label>
        <input type="url" id="ical-url" name="ical" required placeholder="https://example.com/events.ics">
        <div class="error-message" id="ical-error" style="display: none;">Please enter a valid URL</div>
    </div>
    
    <div class="form-group">
        <label for="fallback-url">Event Fallback URL <span class="optional">(optional)</span></label>
        <input type="url" id="fallback-url" name="fallback_url" placeholder="https://example.com/events">
        <div class="help-text">By default, we only import events from iCal that have a URL. If you provide a fallback URL, we will use that link for events that don't have a URL. Events without a URL and no fallback URL will be ignored.</div>
        <div class="error-message" id="fallback-error" style="display: none;">Please enter a valid URL</div>
    </div>
    
    <button type="submit" class="btn-primary">Submit Group</button>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('group-form');
            
            // Only show validation errors after user interaction with the field
            const inputs = form.querySelectorAll('input');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    validateField(this);
                });
                
                input.addEventListener('input', function() {
                    // Hide error when user starts typing
                    const errorId = this.id + '-error';
                    const errorElement = document.getElementById(errorId);
                    if (errorElement) {
                        errorElement.style.display = 'none';
                    }
                });
            });
            
            form.addEventListener('submit', function(e) {
                let isValid = true;
                
                // Validate all fields before submission
                inputs.forEach(input => {
                    if (!validateField(input) && input.required) {
                        isValid = false;
                    }
                });
                
                if (!isValid) {
                    e.preventDefault();
                }
            });
            
            function validateField(field) {
                const errorId = field.id + '-error';
                const errorElement = document.getElementById(errorId);
                
                // Skip validation for optional empty fields
                if (!field.required && field.value === '') {
                    return true;
                }
                
                if (field.validity.valid) {
                    if (errorElement) {
                        errorElement.style.display = 'none';
                    }
                    return true;
                } else {
                    if (errorElement) {
                        errorElement.style.display = 'block';
                    }
                    return false;
                }
            }
        });
    </script>
</form>
