AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create ECR repositories and IAM roles for GitHub Actions'

Parameters:
  GitHubOrg:
    Type: String
    Description: GitHub organization/username that hosts the repository
    Default: rosskarchner
  
  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: cal-containers
  
  GitHubBranch:
    Type: String
    Description: GitHub branch that is allowed to assume the role
    Default: main
    
  StackEnvironment:
    Type: String
    Description: Environment name for the stack (dev, staging, prod)
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
      
  ImageRetentionCount:
    Type: Number
    Description: Number of images to retain in ECR repositories
    Default: 10
    MinValue: 1
    MaxValue: 100

Resources:
  # ECR Repository for App
  AppRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "cal-containers-app"
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      Tags:
        - Key: Environment
          Value: !Ref StackEnvironment
        - Key: Application
          Value: cal-containers
      LifecyclePolicy:
        LifecyclePolicyText: !Sub |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last ${ImageRetentionCount} images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": ${ImageRetentionCount}
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # ECR Repository for Aggregator Lambda
  AggregatorRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "cal-containers-aggregator"
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      Tags:
        - Key: Environment
          Value: !Ref StackEnvironment
        - Key: Application
          Value: cal-containers
      LifecyclePolicy:
        LifecyclePolicyText: !Sub |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last ${ImageRetentionCount} images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": ${ImageRetentionCount}
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # IAM Role for GitHub Actions
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "GitHubActionsECRPushRole-${StackEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com'
              StringLike:
                'token.actions.githubusercontent.com:sub': !Sub 'repo:${GitHubOrg}/${GitHubRepo}:ref:refs/heads/${GitHubBranch}'
      Path: '/'
      Tags:
        - Key: Environment
          Value: !Ref StackEnvironment
        - Key: Application
          Value: cal-containers
      Policies:
        - PolicyName: ECRPushPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:TagResource'
                Resource: '*'

  # OIDC Provider for GitHub Actions
  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: 'https://token.actions.githubusercontent.com'
      ClientIdList:
        - 'sts.amazonaws.com'
      ThumbprintList:
        - '6938fd4d98bab03faadb97b34396831e3780aea1'
      Tags:
        - Key: Environment
          Value: !Ref StackEnvironment
        - Key: Application
          Value: cal-containers

Outputs:
  AppRepositoryURI:
    Description: URI for the App ECR Repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppRepository}"
    Export:
      Name: !Sub "${AWS::StackName}-AppRepositoryURI"
  
  AppRepositoryName:
    Description: Name of the App ECR Repository
    Value: !Ref AppRepository
    Export:
      Name: !Sub "${AWS::StackName}-AppRepositoryName"
  
  AggregatorRepositoryURI:
    Description: URI for the Aggregator Lambda ECR Repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AggregatorRepository}"
    Export:
      Name: !Sub "${AWS::StackName}-AggregatorRepositoryURI"
      
  AggregatorRepositoryName:
    Description: Name of the Aggregator Lambda ECR Repository
    Value: !Ref AggregatorRepository
    Export:
      Name: !Sub "${AWS::StackName}-AggregatorRepositoryName"
  
  GitHubActionsRoleARN:
    Description: ARN for the GitHub Actions IAM Role
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GitHubActionsRoleARN"
      
  StackEnvironment:
    Description: Environment for this stack deployment
    Value: !Ref StackEnvironment
    Export:
      Name: !Sub "${AWS::StackName}-Environment"